options 
{
	STATIC = false ;
}
PARSER_BEGIN(Regador)
package jj;
import java.io.PrintStream;
import java.util.ArrayList;
public class Regador 
{
	public static void main( String[] args ) throws ParseException, TokenMgrError, NumberFormatException 
	{
		Regador parser;
		try
		{
    		parser = new Regador(new java.io.FileInputStream(args[0]));
      	}
      	catch (java.io.FileNotFoundException e)
      	{
        	System.out.println("Archivo no encontrado");
        	return;
      	}  
		parser.Validar(System.out);
		parser.Formato();
	}
}
PARSER_END(Regador)

SKIP : { " " | "\t" }

TOKEN : { < EOL : "\n" | "\r" | "\r\n" > }
TOKEN : { < ASIGNACION : "=" > }
TOKEN : { < IDENTIFICADOR : "_" <LETRAS> ("_" <LETRAS>)*> }
TOKEN : { < NUMEROS : (["0"-"9"])+ > }
TOKEN : { < #LETRAS : (["A"-"Z"])+ > }
TOKEN : { < COMPARABLE : "SENSORHUMEDAD" | "PORCENTAJE_UMBRAL_DE_HUMEDAD" > }
TOKEN : { < ACCION : "BOMBA_OFF" | "BOMBA_ON" | "LEDINDICADOR_OFF" | "LEDINDICADOR_ON" | "ESPERA" | "MOSTRAR_HUMEDAD" > }
TOKEN : { < COMPARADOR : "==" | "!=" | "<" | ">" | ">=" | "<=" > }
TOKEN : { < ENTONCES : "->" > }

void Validar(PrintStream printStream) throws NumberFormatException :
{
}
{
  try
  {
	
	Formato()
	{ printStream.println("Archivo Valido"); }
  }
  catch (Exception e)
  {
    { e.printStackTrace(); }
  }
  
}

String Formato():
{
  String contenido = "";
  ArrayList<String> input =  new ArrayList<String>();
  ArrayList<String> output =  new ArrayList<String>();
  String serial = "";
  Token identificador,valor;
  int d;
}
{
	(
		identificador=<IDENTIFICADOR> <ASIGNACION> valor=<NUMEROS> <EOL>
		{
		  	String identi = identificador.image;
			if (identi.contains("INPUT")) { input = mapear(input,identi); }
		    if (identi.contains("OUTPUT")) { output = mapear(output,identi); }
		    if (identi.contains("SERIAL")) { serial = identi.split("_")[1]; }
			contenido += "int " + identificador.image + " = " + Integer.parseInt(valor.image) + ";" + System.lineSeparator() ;  }
	)*
	{ contenido += "void setup() {" + System.lineSeparator() ;
	  contenido += setearPinMode(input,"INPUT");
	  contenido += setearPinMode(output,"OUTPUT");
	  contenido += "Serial.begin(" + serial + ");" + System.lineSeparator() + "}";
	  contenido += "void loop() {" + System.lineSeparator();
	}
	
	(
		<ACCION> <EOL>

		|
		<COMPARABLE> <COMPARADOR> <COMPARABLE> <ENTONCES> <ACCION> <EOL>
		
	)*
	<EOF>
	{ return contenido; }
}

ArrayList<String> mapear(ArrayList<String> map ,String palabra):
{
}
{
	{
		map.add(palabra.split("_")[1]);
		return map;
	}
}

String setearPinMode(ArrayList<String> array,String tipo):
{
  String mode = "";
}
{
	{
	  for(String variable : array)
	  {
		mode += "pinMode("+ variable + "," + tipo + ");" + System.lineSeparator() ;
	  }
	  return mode;
	}
}

String accion(Token t,ArrayList<String> vars ):
{
  String mode = "";
}
{
	{
	  switch (t.image)
	  {
	  	case "BOMBA_OFF":
	  	{
	  	  mode += "digitalWrite("+", false);";
		  break;
	  	}
	  	
	  }
	  return mode;
	}
}
