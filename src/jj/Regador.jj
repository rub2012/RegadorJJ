options 
{
	STATIC = false ;
}
PARSER_BEGIN(Regador)
package jj;
import java.io.PrintStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
public class Regador 
{
	public static void main( String[] args ) throws ParseException, TokenMgrError, NumberFormatException 
	{
		Regador parser;
		try
		{
    		//parser = new Regador(new java.io.FileInputStream(args[0]));
    		parser = new Regador(new java.io.FileInputStream("./io/input.txt"));
      	}
      	catch (java.io.FileNotFoundException e)
      	{
        	System.out.println("Archivo no encontrado");
        	return;
      	}  
		//String contenido = parser.validar();
		//System.out.print(contenido);
		//parser.generarINO(contenido);
	}
}
PARSER_END(Regador)

SKIP : { " " | "\t" }

TOKEN : { < EOL : "\n" | "\r" | "\r\n" > }
TOKEN : { < ASIGNACION : "=" > }
TOKEN : { < IDENTIFICADOR : "_" <TAG> ("_" <LETRAS>)*> }
TOKEN : { < NUMEROS : (["0"-"9"])+ > }
TOKEN : { < #LETRAS : (["A"-"Z"])+ > }
TOKEN : { < COMPARABLE : "SENSORHUMEDAD" | "PORCENTAJEUMBRALDEHUMEDAD" > }
TOKEN : { < ACCION : "BOMBA_OFF" | "BOMBA_ON" | "LEDINDICADOR_OFF" | "LEDINDICADOR_ON" | "ESPERA" | "SENSORHUMEDAD_MOSTRAR" > }
TOKEN : { < COMPARADOR : "==" | "!=" | "<" | ">" | ">=" | "<=" > }
TOKEN : { < ENTONCES : "->" > }
TOKEN : { < #TAG : "SENSORHUMEDAD" | "PORCENTAJEUMBRALDEHUMEDAD" | "BOMBA" | "LEDINDICADOR" | "ESPERA" | "SERIALCOM" > }

void validar() :
{
}
{
  	(
		<IDENTIFICADOR> <ASIGNACION> <NUMEROS> <EOL>
	)+

	(
		<ACCION> <EOL>
		|
		<COMPARABLE> <COMPARADOR> <COMPARABLE> <ENTONCES> <ACCION> <EOL>
	)+
  	<EOF>
}

String generarContenido() throws NumberFormatException :
{
  String contenido = "";
}
{
  try
  {
	
	contenido = formato()
	{ System.out.println("Archivo Valido"); }
  }
  catch (Exception e)
  {
    { e.printStackTrace(); }
  }
  { return contenido; }
}

String formato():
{
  String contenido = "";
  ArrayList<String> input =  new ArrayList<String>();
  ArrayList<String> output =  new ArrayList<String>();
  ArrayList<String> variables =  new ArrayList<String>();
  String serial = "";
  Token identificador,valor,accion,compara1,compara2,comparador;
  int d;
}
{
	(
		identificador=<IDENTIFICADOR> <ASIGNACION> valor=<NUMEROS> <EOL>
		{
		  	String identi = identificador.image;
			if (identi.contains("INPUT")) { input = mapear(input,identi); }
		    if (identi.contains("OUTPUT")) { output = mapear(output,identi); }
		    if (identi.contains("SERIAL")) { serial = identi.split("_")[1]; }
		    variables.add(identi.split("_")[1]);
			contenido += "int " + identificador.image.split("_")[1] + " = " + Integer.parseInt(valor.image) + ";" + System.lineSeparator() ;
		}
	)+
	{
	  contenido += "void setup() {" + System.lineSeparator() ;
	  contenido += setearPinMode(input,"INPUT");
	  contenido += setearPinMode(output,"OUTPUT");
	  contenido += "Serial.begin(" + serial + ");" + System.lineSeparator() + "}" + System.lineSeparator();
	  contenido += "void loop() {" + System.lineSeparator();
	}
	
	(
		accion = <ACCION> <EOL>
		{ 
			contenido += accion(accion,variables) + System.lineSeparator();
		}
		|
		compara1 = <COMPARABLE> comparador = <COMPARADOR> compara2 = <COMPARABLE> <ENTONCES> accion = <ACCION> <EOL>
		{
		  contenido += "if( " + accion(compara1,variables) + comparador.image + accion(compara2,variables) + ") { " + accion(accion,variables) + " }" + System.lineSeparator() ;
		}
		
	)+
	{ contenido += "}";}
	<EOF>
	{ return contenido; }
}

ArrayList<String> mapear(ArrayList<String> map ,String palabra):
{
}
{
	{
		map.add(palabra.split("_")[1]);
		return map;
	}
}

String setearPinMode(ArrayList<String> array,String tipo):
{
  String mode = "";
}
{
	{
	  for(String variable : array)
	  {
		mode += "pinMode("+ variable + "," + tipo + ");" + System.lineSeparator() ;
	  }
	  return mode;
	}
}

String accion(Token t,ArrayList<String> vars ):
{
  String mode = "";
}
{
	{
	  String accion = t.image.split("_")[0];
	  for (String variable : vars){
 		 if (variable.contains(accion)){
    		accion = variable;
  	  	}
	  }
	  switch (t.image)
	  {
	  	case "BOMBA_OFF":
	  	{
	  	  mode += "digitalWrite("+ accion +", false);";
		  break;
	  	}
	  	case "BOMBA_ON":
	  	{
	  	  mode += "digitalWrite("+ accion +", true);";
		  break;
	  	}
	  	case "LEDINDICADOR_OFF":
	  	{
	  	  mode += "digitalWrite("+ accion +", false);";
		  break;
	  	}
	  	case "LEDINDICADOR_ON":
	  	{
	  	  mode += "digitalWrite("+ accion +", true);";
		  break;
	  	}
	  	case "ESPERA":
	  	{
	  	  mode += "delay("+ accion +");";
		  break;
	  	}	  	
	  	case "SENSORHUMEDAD_MOSTRAR":
	  	{
	  	  mode += "Serial.println(analogRead("+ accion +"));";
		  break;
	  	}
	  	case "SENSORHUMEDAD":
	  	{
	  	  mode += "analogRead("+ accion +")";
		  break;
	  	}
	  	case "PORCENTAJEUMBRALDEHUMEDAD":
	  	{
	  	  mode += accion;
		  break;
	  	}
	  	default: {
		    break;
		}
	  	
	  }
	  return mode;
	}
}

void generarINO(String contenido,String ruta):
{
}
{
	try
	{
		{
		 	BufferedWriter bw = new BufferedWriter(new FileWriter(ruta));
			bw.write(contenido);
			bw.close();
		}
	}
	catch (IOException e)
	{
		e.printStackTrace();
	}
}